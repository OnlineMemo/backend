plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.7'
	id 'io.spring.dependency-management' version '1.1.5'
}

group = 'com.shj'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url 'https://jitpack.io' }
}

ext {
	set('springCloudVersion', "2023.0.2")
	set('springAiVersion', "1.0.2")
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
		mavenBom "org.springframework.ai:spring-ai-bom:${springAiVersion}"
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'com.fasterxml.jackson.core:jackson-databind'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	implementation 'org.jsoup:jsoup:1.15.3'
	implementation group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'

	// MySQL & Redis & MongoDB
	runtimeOnly 'com.mysql:mysql-connector-j'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'

	// External API Client
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
	implementation 'org.springframework.ai:spring-ai-starter-model-openai'

	// Swagger API Docs
	implementation("org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2")

	// TextRank Summarize
	implementation 'kr.bydelta:koalanlp-hnn:2.1.4:assembly'
	implementation 'com.github.shj1106:recap-plus:v2.1.1'

	// JWT
	implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.2'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.2'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.2'

	// UserAgent
	implementation 'com.blueconic:browscap-java:1.5.1'

	// CloudWatch Appender & Slack Appender
	implementation 'ca.pjer:logback-awslogs-appender:1.6.0'
	implementation("com.github.maricn:logback-slack-appender:1.6.1")

	// Logging
	implementation('org.slf4j:jcl-over-slf4j')
	implementation('ch.qos.logback:logback-classic')

	compileOnly 'jakarta.servlet:jakarta.servlet-api:6.0.0'
}

tasks.named('test') {
	useJUnitPlatform()
}

jar {
	enabled = false
}

bootJar {
	enabled = true
}

bootJar {
	outputs.upToDateWhen { false }  // Gradle 캐시 무효화

	doFirst {
		println "!!! bootJar 시작 !!!"

		println "1. properties 파일 존재여부 확인 중..."
		def defaultFile = file("src/main/resources/application.properties")
		def prodFile = file("src/main/resources/application-prod.properties")
		if (!defaultFile.exists()) {
			println "ERROR : 'application.properties' 파일이 없음"
			println "❌ 빌드 실패"
			throw new GradleException("❌ 'application.properties' 파일이 없으므로 빌드 실패")
		}
		if (!prodFile.exists()) {
			println "ERROR : 'application-prod.properties' 파일이 없음"
			println "❌ 빌드 실패"
			throw new GradleException("❌ 'application-prod.properties' 파일이 없으므로 빌드 실패")
		}

		println "2. prod 프로필 적용여부 확인 중..."
		def lines = defaultFile.readLines()
		def activeLine = lines.find {
			it.trim().startsWith("spring.profiles.active=")
		}
		if (activeLine == null) {
			println "ERROR : spring.profiles.active=~ 설정이 없음"
			println "❌ 빌드 실패"
			throw new GradleException("❌ 'spring.profiles.active=~' 설정이 'application.properties' 파일에 없으므로 빌드 실패")
		}
		if (activeLine.trim() != "spring.profiles.active=prod") {
			println "ERROR : spring.profiles.active=~ 프로필이 prod가 아님"
			throw new GradleException("❌ 'spring.profiles.active=~' 프로필이 prod가 아니므로 빌드 실패")
		}

		println "3. 빌드 진행 중..."
	}

	doLast {
		println "✅ 빌드 성공"
		println "!!! bootJar 종료 !!!"
	}

	doLast {
		println "!!! deploy.zip 시작 !!!"

		println "1. zip 압축하는 중..."
		exec {
			commandLine "sh", "-c", """
				chmod +x .platform/hooks/**/*.sh &&
				rm -rf deploy &&
                mkdir -p deploy &&
                mkdir -p deploy/.platform/hooks/predeploy &&
                cp build/libs/onlinememo-spring-project-0.0.1-SNAPSHOT.jar deploy/onlinememo-backend.jar &&
                cp Procfile deploy/Procfile &&
                cp -r .ebextensions deploy/.ebextensions &&
                cp .platform/hooks/predeploy/kill_prev_spring.sh deploy/.platform/hooks/predeploy/kill_prev_spring.sh &&
                cd deploy &&
                zip -r deploy.zip .
            """
		}
	}

	doLast {
		println "✅✅ zip 생성 성공"
		println "!!! deploy.zip 종료 !!!"
	}
}